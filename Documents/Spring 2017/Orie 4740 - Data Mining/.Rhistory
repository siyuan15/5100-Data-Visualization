seq(from = -10, to = 20, by = 0.01)
help("plot")
plot(3, 5)
help("plot.function")
plot((-10 : 20), 0.1x^3 - 2x^2 + 0.1x)
plot((-10 : 20), y)
y = 0.1x^3 - 2x^2 + 0.1x
help("rep")
x = seq(from = -10, to = 20, by = 0.01)
y = (0 : length(x))
for (i in (1: length(x))){
y[i] = 0.1 * x[i]^3 - 2 * x[i]^2 + 0.1 * x[i]
}
x = seq(from = -10, to = 20, by = 0.01)
y = (0 : length(x))
for (i in (1: length(x))){
y[i] = 0.1 * x[i]^3 - 2 * x[i]^2 + 0.1 * x[i]
}
plot(x, y, type = "l")
x = seq(from = -10, to = 20, by = 0.01)
y = (1 : length(x))
for (i in (1: length(x))){
y[i] = 0.1 * x[i]^3 - 2 * x[i]^2 + 0.1 * x[i]
}
plot(x, y, type = "l")
}
plot(x, y, type = "l", main = "x_y",xlab = "x_axis", ylab = "y_axis")
plot(x, y, type = "l", main = "x_y",xlab = "x_axis", ylab = "y_axis")
> par(mfrow = c(2, 1))
par(mfrow = c(2, 1))
lines(x, y-100, type = "l")
lines(x, y-100, type = "l")
x = seq(from = -10, to = 20, by = 0.01)
y = rep(0, length(x))
for (i in (1: length(x))){
y[i] = 0.1 * x[i]^3 - 2 * x[i]^2 + 0.1 * x[i]
}
plot(x, y, type = "l", main = "x_y",xlab = "x_axis", ylab = "y_axis")
lines(x, y-100, type = "l")
par(mfrow = c(2, 1))
x = seq(from = -10, to = 20, by = 0.01)
y = rep(0, length(x))
for (i in (1: length(x))){
y[i] = 0.1 * x[i]^3 - 2 * x[i]^2 + 0.1 * x[i]
}
plot(x, y, type = "l", main = "x_y",xlab = "x_axis", ylab = "y_axis")
lines(x, y-100, type = "l")
x = seq(from = -10, to = 20, by = 0.01)
y = rep(0, length(x))
for (i in (1: length(x))){
y[i] = 0.1 * x[i]^3 - 2 * x[i]^2 + 0.1 * x[i]
}
plot(x, y, type = "l", main = "x_y",xlab = "x_axis", ylab = "y_axis")
x = seq(from = -10, to = 20, by = 0.01)
y = rep(0, length(x))
for (i in (1: length(x))){
y[i] = 0.1 * x[i]^3 - 2 * x[i]^2 + 0.1 * x[i]
}
plot(x, y, type = "l", main = "x_y",xlab = "x_axis", ylab = "y_axis")
lines(x, y-100, type = "l")
x = seq(from = -10, to = 20, by = 0.01)
y = rep(0, length(x))
for (i in (1: length(x))){
y[i] = 0.1 * x[i]^3 - 2 * x[i]^2 + 0.1 * x[i]
}
plot(x, y, type = "l", main = "x_y",xlab = "x_axis", ylab = "y_axis")
lines(x, y-100, type = "l")
par(mfrow = c(2, 1))
par("mar")
par(mar = c(1, 1, 1, 1))
x = seq(from = -10, to = 20, by = 0.01)
y = (1, length(x))
for (i in (1: length(x))){
y[i] = 0.1 * x[i]^3 - 2 * x[i]^2 + 0.1 * x[i]
}
x = seq(from = -10, to = 20, by = 0.01)
y = (1 : length(x))
for (i in (1: length(x))){
y[i] = 0.1 * x[i]^3 - 2 * x[i]^2 + 0.1 * x[i]
}
plot(x, y, type = "l", main = "x_y",xlab = "x_axis", ylab = "y_axis")
lines(x, y-100, type = "l")
par(mfrow = c(2, 1))
par("mar")
par(mar = c(1, 1, 1, 1))
x = seq(from = -10, to = 20, by = 0.01)
y = (1 : length(x))
for (i in (1: length(x))){
y[i] = 0.1 * x[i]^3 - 2 * x[i]^2 + 0.1 * x[i]
}
plot(x, y, type = "l", main = "x_y",xlab = "x_axis", ylab = "y_axis")
lines(x, y-100, type = "l")
par(mfrow = c(2, 1))
par("mar")
par(mar = c(1, 1, 1, 1))
x = seq(from = -10, to = 20, by = 0.01)
y = (1 : length(x))
for (i in (1: length(x))){
y[i] = 0.1 * x[i]^3 - 2 * x[i]^2 + 0.1 * x[i]
}
plot(x, y, type = "l", main = "x_y",xlab = "x_axis", ylab = "y_axis")
lines(x, y-100, type = "l")
par(mfrow = c(2, 1))
par("mar")
par(mar = c(1, 1, 1, 1))
x = seq(from = -10, to = 20, by = 0.01)
y = rep(1, length(x))
for (i in (1: length(x))){
y[i] = 0.1 * x[i]^3 - 2 * x[i]^2 + 0.1 * x[i]
}
plot(x, y, type = "l", main = "x_y",xlab = "x_axis", ylab = "y_axis")
lines(x, y-100, type = "l")
par(mfrow = c(2, 1))
par("mar")
par(mar = c(1, 1, 1, 1))
x = seq(from = -10, to = 20, by = 0.01)
y = rep(1, length(x))
for (i in (1: length(x))){
y[i] = 0.1 * x[i]^3 - 2 * x[i]^2 + 0.1 * x[i]
}
plot(x, y, type = "l", main = "x_y", xlab = "x_axis", ylab = "y_axis")
lines(x, y-100, type = "l")
x = seq(from = -10, to = 20, by = 0.01)
y = rep(1, length(x))
for (i in (1: length(x))){
y[i] = 0.1 * x[i]^3 - 2 * x[i]^2 + 0.1 * x[i]
}
plot(x, y, type = "l", main = "x_y", xlab = "x_axis", ylab = "y_axis")
plot(x, y, type = "l",xlab = "x_axis", ylab = "y_axis", main = "x_y")
x = seq(from = -10, to = 20, by = 0.01)
y = rep(1, length(x))
for (i in (1: length(x))){
y[i] = 0.1 * x[i]^3 - 2 * x[i]^2 + 0.1 * x[i]
}
plot(x, y, type = "l",xlab = "x_axis", ylab = "y_axis", main = "x_y")
lines(x, y-100, type = "l")
setwd = ("/Users/siyuan/Downloads")
corollas = read.table(file = "ToyotaCorolla.csv", header = T, sep = ",")
corollas = read.table(file = "/Users/siyuan/Downloads/ToyotaCorolla.csv", header = T, sep = ",")
View(corollas)
nrow(corollas)
corollas[!complete.cases(corollas)),]
corollas[!complete.cases(corollas),]
getwd(corollas)
getwd("corollas.csv")
View(corollas)
sum(is.na(corollas$Price))
corollas2 <- corollas[, c("Price","Age_08_04", "KM", "Fuel_Type", "HP",
"Met_Color", "Doors", "Quarterly_Tax", "Weight") ]
is.factor(corollas2$Fuel_Type)
is.factor(corollas2$Met_Color)
corollas2$Met_Color = as.factor(corollas2$Met_Color)
is.factor(corollas2$Met_Color)
levels(corollas2$Fuel_Type)
corollasLM = lm( formula = Price ~ ., data = corollas2 )
summary(corollasLM)
samples = (4, 11, 6, 7, 3, 7, 2, 4, 15, 6, 7, 5, 4, 15, 7, 5, 7)
samples = c(4, 11, 6, 7, 3, 7, 2, 4, 15, 6, 7, 5, 4, 15, 7, 5, 7)
mean(samples)
hist.default(samples)
frequency(samples)
hist(samples, right = FALSE)
samples <- [4, 11, 6, 7, 3, 7, 2, 4, 15, 6, 7, 5, 4, 15, 7, 5, 7]
samples = (4, 11, 6, 7, 3, 7, 2, 4, 15, 6, 7, 5, 4, 15, 7,
5, 7)
samples = (4, 11, 6, 7, 3, 7, 2, 4, 15, 6, 7, 5, 4, 15, 7, 5, 7)
samples = c(4, 11, 6, 7, 3, 7, 2, 4, 15, 6, 7, 5, 4, 15, 7, 5, 7)
hist(samples, right = FALSE, break = 15)
hist(samples, right = FALSE, break = "15")
hist(samples, right = FALSE, breaks = 15)
x = seq(from = -10, to = 20, by = 0.01)
y = rep(1, length(x))
for (i in (1: length(x))){
y[i] = 0.1 * x[i]^3 - 2 * x[i]^2 + 0.1 * x[i]
}
plot(x, y, type = "l",xlab = "x_axis", ylab = "y_axis", main = "x_y")
lines(x, y-100, type = "l")
par(mfrow = c(2, 1))
par("mar")
par(mar = c(1, 1, 1, 1))
corollas = read.table(file = "/Users/siyuan/Downloads/ToyotaCorolla.csv", header = T, sep = ",")
nrow(corollas)
sum(is.na(corollas$Price))
corollas2 <- corollas[, c("Price","Age_08_04", "KM", "Fuel_Type", "HP",
"Met_Color", "Doors", "Quarterly_Tax", "Weight") ]
is.factor(corollas2$Fuel_Type)
levels(corollas2$Fuel_Type)
is.factor(corollas2$Met_Color)
corollas2$Met_Color = as.factor(corollas2$Met_Color)
corollasLM = lm( formula = Price ~ ., data = corollas2 )
summary(corollasLM)
mean(corollas$Price)
ncol(corollas)
titanic = read.table(file = "/Users/siyuan/Documents/Spring 2017/Orie 4740 - Data Mining/titanic.csv", header = T, sep = ",")
View(titanic)
titanic = read.table(file = "/Users/siyuan/Documents/Spring 2017/Orie 4740 - Data Mining/titanic.csv", header = T, sep = ",", na.strings = ``)
titanic = read.table(file = "/Users/siyuan/Documents/Spring 2017/Orie 4740 - Data Mining/titanic.csv", header = T, sep = ",", na.strings = ``)
titanic = read.table(file = "/Users/siyuan/Documents/Spring 2017/Orie 4740 - Data Mining/titanic.csv", header = T, na.strings = ``)
titanic = read.table(file = "/Users/siyuan/Documents/Spring 2017/Orie 4740 - Data Mining/titanic.csv", header = T, na.strings = '')
titanic = read.csv(file = "/Users/siyuan/Documents/Spring 2017/Orie 4740 - Data Mining/titanic.csv", header = T, na.strings = '')
titanic <- titanic[, !columnaes(titanic) %in% c('PassengerId', 'Name', 'Ticket', 'Cabin')]
titanic <- titanic[, !colnames(titanic) %in% c('PassengerId', 'Name', 'Ticket', 'Cabin')]
View(titanic)
titanic <- titanic[complete.cases(titanic),]
set.seed(1)
train_ind <- sample(1:nrow(titanic), 2/3 * nrow(titanic))
View(titanic)
help(sapply)
titanic_train <- titanic[train_ind, ]
sapply(titanic, class)
titanic_test <- titanic[-train_ind, ]
sapply(titanic, class)
titanic_logit <- glm(Survived~., data = titanic_train, family = binomial)
titanic_pred <- predict(titanic_logit, titanic_test, type = "response")
summary(titanic_logit)
titanic_bin <- as.numeric(titanic_pred >= 0.5)
table(titanic_bin, titanic_test$Survived)
help("predict")
View(titanic)
summary(titanic_logit)
titanic_bin <- as.numeric(titanic_pred >= 0.5)
table(titanic_bin, titanic_test$Survived)
install.packages("ISLR")
library(ISLR)
fix(Hitters)
summary(Hitters)
install.packages("leaps")
library(ISLR)
fix(Hitters)
summary(Hitters)
sum(is.na(Hitters))
Hitters = na.omit(Hitters)
dim(Hitters)
library(leaps)
regfit.full = regsubsets(Salary~., Hitters)
summary(regfit.full)
regfit.full = regsubsets(Salary~., data = Hitters, nvmax = 19)
reg.summary = summary(regfit.full)
names(reg.summary)
reg.summary$rsq
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "1")
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "1")
which.max(reg.summary$adjr2)
points(11, reg.summary$adjr2[11], col = "red", cex = 2, pch = 20)
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "1")
which.min(reg.summary$cp)
points(10, reg.summary$cp[10], col = "red", cex = 2, pch = 20)
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "1")
which.min(reg.summary$bic)
points(6, reg.summary$bic[6], col = "red", cex = 2, pch = 20)
plot(regfit.full, scale = "r2")
plot(regfit.full, scale = "adjr2")
plot(regfit.full, scale = "cp")
plot(regfit.full, scale = "bic")
coef(regfit.full, 6)
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = '1')
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = '1')
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = 'l')
names(reg.summary)
reg.summary$rsq
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = 'l')
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
which.max(reg.summary$adjr2)
points(11, reg.summary$adjr2[11], col = "red", cex = 2, pch = 20)
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
which.min(reg.summary$cp)
points(10, reg.summary$cp[10], col = "red", cex = 2, pch = 20)
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
which.min(reg.summary$bic)
points(6, reg.summary$bic[6], col = "red", cex = 2, pch = 20)
plot(regfit.full, scale = "r2")
plot(regfit.full, scale = "adjr2")
plot(regfit.full, scale = "cp")
plot(regfit.full, scale = "bic")
coef(regfit.full, 6)
plot(regfit.full, scale = "r2")
plot(regfit.full, scale = "adjr2")
plot(regfit.full, scale = "Cp")
plot(regfit.full, scale = "bic")
coef(regfit.full, 6)
#install.packages("ISLR")
#install.packages("leaps")
library(ISLR)
fix(Hitters)
summary(Hitters)
sum(is.na(Hitters))
Hitters = na.omit(Hitters)
dim(Hitters)
library(leaps)
regfit.full = regsubsets(Salary~., Hitters)
summary(regfit.full)
regfit.full = regsubsets(Salary~., data = Hitters, nvmax = 19)
reg.summary = summary(regfit.full)
names(reg.summary)
reg.summary$rsq
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = 'l')
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
which.max(reg.summary$adjr2)
points(11, reg.summary$adjr2[11], col = "red", cex = 2, pch = 20)
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
which.min(reg.summary$cp)
points(10, reg.summary$cp[10], col = "red", cex = 2, pch = 20)
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
which.min(reg.summary$bic)
points(6, reg.summary$bic[6], col = "red", cex = 2, pch = 20)
plot(regfit.full, scale = "r2")
plot(regfit.full, scale = "adjr2")
plot(regfit.full, scale = "Cp")
plot(regfit.full, scale = "bic")
coef(regfit.full, 6)
# Forward and Backward Stepwise Selection
regfit.fwd = regsubsets(Salary~., data = Hitters, nvmax = 19, method = "forward")
summary(regfit.fwd)
regfit.bwd=regsubsets (Salary∼., data = Hitters,nvmax=19, method = "backward")
summary(regfit.bwd)
coef(regfit.full ,7)
coef(regfit.fwd ,7)
coef(regfit.bwd ,7)
regfit.fwd = regsubsets(Salary~., data = Hitters, nvmax = 19, method = "forward")
summary(regfit.fwd)
# Forward and Backward Stepwise Selection
regfit.fwd = regsubsets(Salary~., data = Hitters, nvmax = 19, method = "forward")
summary(regfit.fwd)
regfit.bwd=regsubsets (Salary~., data = Hitters,nvmax=19, method = "backward")
summary(regfit.bwd)
coef(regfit.full ,7)
coef(regfit.fwd ,7)
coef(regfit.bwd ,7)
setwd("/Users/siyuan/Documents/Spring 2017/Orie 4740 - Data Mining")
corollas0 = read.csv("ToyotaCorolla.csv", header = T)
corollas = corollas0[, c("Price", "Age_08_04", "KM")]
sapply(corollas, class)
setwd("/Users/siyuan/Documents/Spring 2017/Orie 4740 - Data Mining")
corollas0 = read.csv("ToyotaCorolla.csv", header = T)
corollas = corollas0[, c("Price", "Age_08_04", "KM")]
sapply(corollas, class)
corollas = corollas[complete.cases(corollas), ]
set.seed(1)
train_id = sample(nrow(corollas0), nrow(corollas)/2)
lm.fit = lm(Price~Age_08_04 + KM, data = corollas, subset = train_id)
summary(lm.fit)
sum = summary(lm.fit)
mse <- function(sum)
mean(sum$residuals^2)
View(mse)
View(mse)
mse(sum)
summary(lm.fit)
test_id = corollas[-train_id,]
setwd("/Users/siyuan/Documents/Spring 2017/Orie 4740 - Data Mining")
corollas0 = read.csv("ToyotaCorolla.csv", header = T)
corollas = corollas0[, c("Price", "Age_08_04", "KM")]
sapply(corollas, class)
corollas = corollas[complete.cases(corollas), ]
set.seed(1)
train_id = sample(nrow(corollas0), nrow(corollas)/2)
test_id = corollas[-train_id,]
lm.fit1 = lm(Price~Age_08_04 + KM, data = corollas, subset = train_id)
summary(lm.fit1)
mse = mean((test_id$Price-predict(lm.fit1,test_id))^2)
ToyotaCorolla <- read_csv("/Users/siyuan/Documents/Spring 2017/Orie 4740 - Data Mining/ToyotaCorolla.csv");
corollas <- ToyotaCorolla[, c("Price","Age_08_04", "KM")];
cor <- corollas[complete.cases(corollas), ];
#View(cor)
set.seed(1)
train_id = sample(nrow(cor), nrow(cor)/2)
cor.test= cor[-train_id,]
lm1 <- lm(Price~Age_08_04+KM, data = cor, subset=train_id)
lm.fit2 = lm(Price~Poly(Age_08_04, 2) + Poly(KM, 2), data = corollas, subset = train_id)
lm.fit2 = lm(Price~poly(Age_08_04, 2) + Poly(KM, 2), data = corollas, subset = train_id)
library(readr)
library(boot)
library(caTools)
lm.fit2 = lm(Price~poly(Age_08_04, 2) + Poly(KM, 2), data = corollas, subset = train_id)
setwd("/Users/siyuan/Documents/Spring 2017/Orie 4740 - Data Mining")
corollas0 = read.csv("ToyotaCorolla.csv", header = T)
corollas = corollas0[, c("Price", "Age_08_04", "KM")]
sapply(corollas, class)
corollas = corollas[complete.cases(corollas), ]
set.seed(1)
train_id = sample(nrow(corollas0), nrow(corollas)/2)
test_id = corollas[-train_id,]
lm.fit1 = lm(Price~Age_08_04 + KM, data = corollas, subset = train_id)
lm.fit2 = lm(Price~poly(Age_08_04, 2) + poly(KM, 2), data = corollas, subset = train_id)
lm.fit3 = lm(Price~poly(Age_08_04, 3) + poly(KM,3), data = corollas, subset = train_id)
summary(lm.fit1)
summary(lm.fit2)
summary(lm.fit3)
mse = mean((test_id$Price-predict(lm.fit2,test_id))^2)
mse = mean((test_id$Price-predict(lm.fit3,test_id))^2)
library(boot)
cv.error = rep(0, 5)
for (i in 1:5) {
glm.fit = glm(Price-poly(Age_08_04, i) + poly(KM, i), data = corollas)
cv.error[i] = cv.glm(corollas, glm.fit)$delta[i]
}
cv.error
plot(cv.error, type = "b")
library(boot)
cv.error = rep(0, 5)
for (i in 1:5) {
glm.fit = glm(Price~poly(Age_08_04, i) + poly(KM, i), data = corollas)
cv.error[i] = cv.glm(corollas, glm.fit)$delta[i]
}
cv.error
plot(cv.error, type = "b")
summary(glm.fit)
library(boot)
cv.error = rep(0, 5)
for (i in 1:5) {
glm.fit = glm(Price~poly(Age_08_04, i) + poly(KM, i), data = corollas)
cv.error[i] = cv.glm(corollas, glm.fit)$delta[i]
}
cv.error
plot(cv.error, type = "b")
lm.fit1 = lm(Price~Age_08_04 + KM, data = corollas, subset = train_id)
lm.fit2 = lm(Price~poly(Age_08_04, 2) + poly(KM, 2), data = corollas, subset = train_id)
lm.fit3 = lm(Price~poly(Age_08_04, 3) + poly(KM,3), data = corollas, subset = train_id)
library(boot)
cv.error = rep(0, 5)
for (i in 1:5) {
glm.fit = glm(Price~poly(Age_08_04, i) + poly(KM, i), data = corollas)
cv.error[i] = cv.glm(corollas, glm.fit)$delta[i]
}
cv.error
plot(cv.error, type = "b")
summary(glm.fit)
library(boot)
cv.error = rep(0, 5)
for (i in 1:5) {
glm.fit = glm(Price~poly(Age_08_04, i) + poly(KM, i), data = corollas)
cv.error[i] = cv.glm(corollas, glm.fit)$delta[1]
}
cv.error
plot(cv.error, type = "b")
summary(glm.fit)
cv.error = rep(0:5)
for (i in 1:5) {
glm.fit = glm(Price~poly(Age_08_04, i)+poly(KM, i), data = corollas)
cv.error[i] = cv.glm(corollas, glm.fit, k=10)$delta[1]
}
cv.error
plot(cv.error, type = "b")
cv.error = rep(0:5)
for (i in 1:5) {
glm.fit = glm(Price~poly(Age_08_04, i)+poly(KM, i), data = corollas)
cv.error[i] = cv.glm(corollas, glm.fit, K=10)$delta[1]
}
cv.error
plot(cv.error, type = "b")
cv.error = rep(0:5)
for (i in 1:5) {
glm.fit = glm(Price~poly(Age_08_04, i)+poly(KM, i), data = corollas)
cv.error[i] = cv.glm(corollas, glm.fit, K=10)$delta[1]
}
cv.error
plot(cv.error, type = "b")
cv.error = rep(0:5)
for (i in 1:5) {
glm.fit = glm(Price~poly(Age_08_04, i)+poly(KM, i), data = corollas)
cv.error[i] = cv.glm(corollas, glm.fit, K=10)$delta[1]
}
cv.error
plot(cv.error, type = "b")
cv.error = rep(0:5)
for (i in 1:5) {
glm.fit = glm(Price~poly(Age_08_04, i)+poly(KM, i), data = corollas)
cv.error[i] = cv.glm(corollas, glm.fit, K=10)$delta[1]
}
cv.error
plot(cv.error, type = "b")
n = 1000;
x1= runif(n)
x2= runif(n,-2,1)
z = (x1-0.2)*(x1-0.5)*25 -x2*(x2+1.2)*(x2-0.8)+rnorm(n)/3
y = as.integer(z>0)
plot(x1,x2,col=c("red","blue")[y+1])
DF = data.frame(x1,x2,y)
View(DF)
cv.error = rep(0, 5)
for (i in 1:5) {
glm.fit = glm(y~poly(x1, i) + poly(x2, i), data = DF, family = binomial(link = "logit"))
cv.error[i] = cv.glm(DF, glm.fit)$delta[1]
}
cv.error
plot(cv.error, type = "b")
summary(glm.fit)
